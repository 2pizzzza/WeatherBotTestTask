import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiohttp
from datetime import datetime

API_TOKEN = '7497152732:AAEJ8jWQjZp6fx49XSQupN1DpICI72rln4I'
WEATHER_API_KEY = '475e0c67d960505af47464bd36f0c7c3'
BASE_URL = "http://api.openweathermap.org/data/2.5/weather?"


logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_last_city = {}


def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"))
    builder.add(KeyboardButton(text="–ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥"))
    builder.add(KeyboardButton(text="–ü–æ–º–æ—â—å"))
    return builder.as_markup(resize_keyboard=True)


@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "- –ó–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å\n"
        "- –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.",
        reply_markup=get_main_keyboard()
    )


@dp.message(lambda message: message.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def ask_city(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(lambda message: message.text == "–ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥")
async def last_city(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_last_city:
        await get_weather(message, user_last_city[user_id])
    else:
        await message.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ–≥–æ–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")


@dp.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def send_help(message: types.Message):
    await send_welcome(message)


@dp.message()
async def get_weather(message: types.Message, city=None):
    if not city:
        city = message.text

    user_id = message.from_user.id
    user_last_city[user_id] = city

    try:
        weather_url = f'{BASE_URL}appid={WEATHER_API_KEY}&q={city}&units=metric&lang=ru'

        async with aiohttp.ClientSession() as session:
            async with session.get(weather_url) as response:
                weather_data = await response.json()

                if weather_data['cod'] == 200:
                    temperature = weather_data['main']['temp']
                    feels_like = weather_data['main']['feels_like']
                    humidity = weather_data['main']['humidity']
                    description = weather_data['weather'][0]['description']
                    wind_speed = weather_data['wind']['speed']
                    sunrise = datetime.fromtimestamp(weather_data['sys']['sunrise']).strftime('%H:%M')
                    sunset = datetime.fromtimestamp(weather_data['sys']['sunset']).strftime('%H:%M')

                    weather_message = (
                        f"üèô –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:.1f}¬∞C\n"
                        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"üå¨ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
                        f"‚òÄÔ∏è –í–æ—Å—Ö–æ–¥: {sunrise}\n"
                        f"üåÖ –ó–∞–∫–∞—Ç: {sunset}\n"
                        f"üìù {description.capitalize()}"
                    )

                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data=f"forecast_{city}")]
                    ])

                    await message.answer(weather_message, reply_markup=keyboard)
                else:
                    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
    except Exception as e:
        logging.error(f"Error occurred: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await message.answer("–ß—Ç–æ –µ—â–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=get_main_keyboard())


@dp.callback_query(lambda c: c.data and c.data.startswith('forecast_'))
async def process_callback_forecast(callback_query: types.CallbackQuery):
    city = callback_query.data.split('_')[1]
    forecast_url = f'http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru'

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(forecast_url) as response:
                forecast_data = await response.json()

                if forecast_data['cod'] == '200':
                    forecast_message = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n"
                    for forecast in forecast_data['list'][::8]:  # –ë–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (—Å —à–∞–≥–æ–º 24 —á–∞—Å–∞)
                        date = datetime.fromtimestamp(forecast['dt']).strftime('%d.%m')
                        temp = forecast['main']['temp']
                        description = forecast['weather'][0]['description']
                        forecast_message += f"{date}: {temp:.1f}¬∞C, {description}\n"

                    await bot.answer_callback_query(callback_query.id)
                    await bot.send_message(callback_query.from_user.id, forecast_message)
                else:
                    await bot.answer_callback_query(callback_query.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
    except Exception as e:
        logging.error(f"Error occurred: {e}")
        await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())